openapi: 3.0.3
info: 
  title: "Yanis Api"
  version: "1.0.5"
servers:
  - url: http://localhost:8080/v1
  - url: https://localhost:4443/v1
paths:
  /user:
    get:
      parameters:
        - in: query
          description: request needed to perform the filter operation
          name: request
          required: true
          schema:
            items:
              $ref: '#/components/schemas/Request'
        - in: query
          name: type
          description: "flag include headless only"
          required: false
          schema:
            enum:
              - 'headless'
              - 'human'
              - 'all'
            default: 'headless'
      responses:
        200:
          description: "list of all users"
          content: 
            application/json:
              schema: 
                type: object
                items:
                  $ref: '#/components/schemas/UserList'
            application/xml:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/UserList'

  /user/{name}:
    get:
      parameters:
        - name: name
          in: path
          description: user's login name
          required: true
          schema:
            type: string
      responses:
        200:
          description: "user details for the name provided"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                title: "TODO - this is for opsdb user api replacement"
                
  /unixheadless:
    post:
      description: "create a unix headless user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeadlessUserStub'
      responses:
        201:
          description: "unix headless user created"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
                
  /unixheadless/{name}:
    get:
      parameters:
        - name: name
          in: path
          description: headless user login name
          required: true
          schema:
            type: string
      responses:
        200:
          description: "headless details for the name provided"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
                
    put:
      summary: "TODO - address questions about renaming"
      parameters:
        - name: name
          in: path
          description: headless user login name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeadlessUserStub'
      description: "disable/enable a unix headless user"
      responses:
        204:
          description: "No Content"

  /unixgroup:
    post:
      description: "create a unix group"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupStub'
      responses:
        201:
          description: "unixgroup created"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Group'
    get:
      description: "list of all unix groups"
      responses:
        200:
          description: "list of all unix groups"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Group'
                
  /unixgroup/{name}:
    get:
      parameters:
        - name: name
          in: path
          description: unixgroup name
          required: true
          schema:
            type: string
      responses:
        200:
          description: "unixgroup details for the name provided"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Group'
                
    put:
      parameters:
        - name: name
          in: path
          description: unixgroup name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupStub'
      responses:
        204:
          description: "No Content"
                
  /unixgroup/{name}/member/{membername}:
    put:
      parameters:
        - name: name
          in: path
          description: unixgroup name
          required: true
          schema:
            type: string
        - name: membername
          in: path
          description: membername
          required: true
          schema:
            type: string
      description: "disable/enable a unix headless user"
      responses:
        204:
          description: "No Content"
          
    delete:
      parameters:
        - name: name
          in: path
          description: unixgroup name
          required: true
          schema:
            type: string
        - name: membername
          in: path
          description: membername
          required: true
          schema:
            type: string
      description: "disable a unix headless user"
      responses:
        204:
          description: "No Content"
          
  /pinguser/{username}:
    get:
      summary: Checks if the server is alive
      parameters:
        - name: username
          in: path
          description: user name
          required: true
          schema:
            type: string
        - in: header
          name: X-Request-ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: "user details for the name provided"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        
components:
  schemas:
    User: 
      properties:
        uid: 
          type: integer
          format: int32
        name: 
          type: string
        
    UserList:
      properties:
          users:
            type: array
            items:
              $ref: '#/components/schemas/User'
          
    HeadlessUserStub: 
      type: object
      properties:
        name: 
          type: string
        property:
          type: string
        email:
          type: string
        disable:
          type: boolean
          
    Member:
      type: string
          
    Group: 
      type: object
      properties:
        gid: 
          type: integer
          format: int32
        name: 
          type: string
        description:
          type: string
        members:
          type: array
          items: 
            $ref: '#/components/schemas/Member'
  
    GroupStub: 
      type: object
      properties:
        name: 
          type: string
        description:
          type: string
        members:
          type: array
          items: 
            $ref: '#/components/schemas/Member'
        disable:
          type: boolean
          
[...]:
    Request:
      type: object


            
  
